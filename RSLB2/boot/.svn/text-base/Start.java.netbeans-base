/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author fabio
 */
public class Start {
    
    static final String DEFAULT_CONFIG_FILE_NAME = "params.cfg";
    static final String DEFAULT_ALG_TAG = "assignment_class";
    //static final String DEFAULT_ALG = "Dummy";
    static final String DEFAULT_START_TAG = "experiment_start_time";
    //static final String DEFAULT_START_TIME = "20";
    
    //NUMBER OF TEST FOR EACH COMBINATION OF VALUES
    static final int NUMBER_OF_RUNS = 1;
    static HashMap<String, String[]> params = new HashMap<String, String[]>();
    static HashMap<Integer, String> paramPosition = new HashMap<Integer, String>();
    static ArrayList<String[]> paramValues = new ArrayList<String[]>();
    static String curAlg;
    //static ArrayList<ArrayList> paramValues;

    public static void main(String args[]) throws IllegalInputException {
        initialize(args);
        int testNumber = NUMBER_OF_RUNS;
        String[] curParams = new String[(paramValues.size()) * 2];

        for (int i = 0; i < params.size(); i++) {
            testNumber *= paramValues.get(i).length;
        }
        //System.out.println("Numero di test da effettuare: "+testNumber);

        for (int i = 0; i < testNumber; i++) {
            writeParams(i, curParams);
            executeCommand();
        }
    }

    private static void initialize(String[] args) throws IllegalInputException {
        int counter = 0;
        try {
            String fileName = "";
            try {
                if (args[0] != null) {
                    fileName = args[0];
                }
            }
            catch (ArrayIndexOutOfBoundsException e) {
                fileName = DEFAULT_CONFIG_FILE_NAME;
            }
            
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.charAt(0) != '#') {
                    String[] content = line.split(":");
                    String name = content[0];
                    String values = content[1].trim();
                    String[] valuesArray = values.split(" ");
                    params.put(name, valuesArray);
                    paramPosition.put(counter, name);
                    counter++;
                    paramValues.add(valuesArray);
                    /*System.out.print(name+" ");
                    System.out.print(values+"\nI valori nell'array sono:\n");
                    for (String value: valuesArray) {
                        System.out.println(value);
                    }*/
                }
            }
            reader.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.exit(0);
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(0);
        }
        
        /*if (!params.containsKey(DEFAULT_ALG_TAG)) {
            setDefault(1, counter);
            counter++;
        }
        if (!params.containsKey(DEFAULT_START_TAG)) {
            setDefault(2, counter);
            counter++;
        }*/

    }

    /*private static void setDefault(int status, int counter) {
        if (status == 1) {
            String[] algorithms = new String[1];
            algorithms[0] = DEFAULT_ALG;
            params.put(DEFAULT_ALG_TAG, algorithms);
            paramValues.add(algorithms);
            paramPosition.put(counter, DEFAULT_ALG_TAG);
        } else if (status == 2) {
            String[] start = new String[1];
            start[0] = DEFAULT_START_TIME;
            params.put(DEFAULT_START_TAG, start);
            paramValues.add(start);
            paramPosition.put(counter, DEFAULT_START_TAG);
        }
    }*/

    private static void writeParams(int curTest, String[] curParams) {
        int j = paramValues.size() - 1;
        int counter = 0;
        while (j >= 0) {
            int paramChangeValue = 1;
            for (int z = j + 1; z < paramValues.size(); z++) {
                paramChangeValue *= paramValues.get(z).length;
            }
            if (curTest % paramChangeValue == 0) {
                curParams[counter] = paramPosition.get(j);
                counter++;
                curParams[counter] = (String) (paramValues.get(j)[(curTest / paramChangeValue) % (paramValues.get(j).length)]);
                counter++;
            }
            j--;
        }

        String alg = "";
        for (int i = 0; i < curParams.length - 1; i++) {
            if (curParams[i].equals(DEFAULT_ALG_TAG)) {
                alg = curParams[i + 1];
                break;
            }
        }
        try {
            BufferedWriter out;
            if (!alg.equals("")) {
                curAlg = alg;
                out = new BufferedWriter(new FileWriter(new File("config/" + curAlg + ".cfg")));
            } else {
                out = null;
            }
            out.write("!include common.cfg\n");
            for (int i = 0; i < (curParams.length) - 1; i++) {

                if (i % 2 == 0) {
                    //System.out.println(curParams[i]+": "+curParams[i+1]);
                    out.write(curParams[i] + ": " + curParams[i + 1] + "\n");
                    out.flush();
                }
            }
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(0);
        }
    }

    public static void executeCommand() {
        try {
            File temp = new File("config_single.sh");
            BufferedWriter bw = new BufferedWriter(new FileWriter(temp));
            bw.write("alg=" + "\"" + curAlg + "\"");
            bw.flush();
            bw.close();

            ProcessBuilder pb = new ProcessBuilder("/bin/bash", "run_single_alg.sh");
            try {
                pb.redirectErrorStream(true);
                Process p = pb.start();
                BufferedReader buf = new BufferedReader(new InputStreamReader(p.getInputStream()));

                String line = "";
                while ((line = buf.readLine()) != null) {
                    System.out.println(line);
                }
                p.waitFor();
            } catch (Exception e) {
                e.printStackTrace();
            }
            temp.delete();
            
        } catch (IOException e) {
        }
        
        SimpleDateFormat date = new SimpleDateFormat("dd_MM_yy@hh:mm:ss");

        ProcessBuilder pb2 = new ProcessBuilder("./post_elaboration.sh", date.format(new Date()), curAlg);
        try {
                pb2.redirectErrorStream(true);
                Process p = pb2.start();
                BufferedReader buf = new BufferedReader(new InputStreamReader(p.getInputStream()));

                String line = "";
                while ((line = buf.readLine()) != null) {
                    System.out.println(line);
                }
                p.waitFor();
            } catch (Exception e) {
                e.printStackTrace();
            }
    }
}
